spring:
  profiles:
    active: TEST

  mail:
    host: ${MAIL_HOST}
    port: ${MAIL_PORT}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}

    properties:
      mail:
        smtp:
          auth: true
          timeout: 5000
          starttls:
            enable: true

  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: validate

    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect
    open-in-view: false

logging.level:
  org.hibernate.SQL: debug
  org.hibernate.type: trace

jwt:
  secret: ${JWT_SECRET_TOKEN}
  access-token-valid-seconds: ${JWT_ACCESS_TOKEN_VALID_SECONDS}
  refresh-token-valid-seconds: ${JWT_REFRESH_TOKEN_VALID_SECONDS}

server:
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true

  tomcat:
    uri-encoding: UTF-8

file:
  upload:
    location: ${FILE_UPLOAD_LOCATION}

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${OAUTH2_KAKAO_CLIENT_ID}
            client-secret: ${OAUTH2_KAKAO_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/api/auth/code/kakao
            client-authentication-method: POST

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize # "인가 코드 받기" 항목
            token-uri: https://kauth.kakao.com/oauth/token # "토큰 받기" 항목
            user-info-uri: https://kapi.kakao.com/v2/user/me # "사용자 정보 가져오기" 항목
            user-name-attribute: id # 식별자 . 카카오의 경우 "id" 사용